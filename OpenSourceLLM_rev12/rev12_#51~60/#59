#59
# 필요한 라이브러리 임포트
from langchain_text_splitters import CharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_community.document_loaders import TextLoader
from langchain_community.embeddings import OllamaEmbeddings
import os
import gradio as gr

# 현재 파이썬 스크립트 실행 위치 반환
current_dir = os.path.dirname(os.path.abspath(__file__))

# "restaurant-faiss" 폴더 경로
restaurant_faiss = os.path.join(current_dir, "restaurant-faiss")

# -------------------------------------------------------------------
# 1. 텍스트 문서 로드 및 분할
# -------------------------------------------------------------------
# "restaurants.txt" 파일 로드
loader = TextLoader(f'{current_dir}/restaurants.txt', encoding="utf-8")
documents = loader.load()

# 텍스트를 300자 단위로 나누고 50자 겹침을 줌
text_splitter = CharacterTextSplitter(chunk_size=300, chunk_overlap=50)
docs = text_splitter.split_documents(documents)

# -------------------------------------------------------------------
# 2. 임베딩 모델 (Ollama + DeepSeek-R1)
# -------------------------------------------------------------------
# Ollama에 설치된 로컬 임베딩 모델 사용 (예: "nomic-embed-text")
# Ollama 터미널에서 `ollama pull nomic-embed-text` 필요
embeddings = OllamaEmbeddings(model="nomic-embed-text")

# -------------------------------------------------------------------
# 3. 벡터 DB (FAISS) 생성 및 저장
# -------------------------------------------------------------------
db = FAISS.from_documents(docs, embeddings)
db.save_local(restaurant_faiss)
print("레스토랑 임베딩 저장 완료:", restaurant_faiss)

# -------------------------------------------------------------------
# 4. Gradio 인터페이스 (검색 기능 제공)
# -------------------------------------------------------------------
# 저장된 벡터 DB 로드
db = FAISS.load_local(restaurant_faiss, embeddings, allow_dangerous_deserialization=True)

# 검색 함수 정의
def search_restaurant(query):
    # 사용자가 입력한 질문에 대해 상위 3개 유사 문서 검색
    results = db.similarity_search(query, k=3)
    # 검색된 결과를 문자열로 반환
    output = "\n\n".join([f"🔹 {res.page_content}" for res in results])
    return output if output else "검색 결과가 없습니다."

# Gradio UI 구성
with gr.Blocks() as demo:
    gr.Markdown("## 🍽️ 레스토랑 추천 검색기 (DeepSeek + FAISS)")
    with gr.Row():
        with gr.Column(scale=2):
            query = gr.Textbox(label="검색어 입력", placeholder="예: 서울에 있는 일식집 추천해줘")
            btn = gr.Button("검색 실행")
        with gr.Column(scale=3):
            output = gr.Textbox(label="검색 결과", lines=10)

    btn.click(search_restaurant, inputs=query, outputs=output)

# 실행
if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860)










